import requests
from datetime import datetime, timedelta
import tkinter as tk
from tkinter import StringVar, CENTER, LabelFrame
from tkinter.ttk import Combobox, Treeview, Scrollbar

def poisk_matchey(i, sport_nom):
    all_spisok_matchey = []
    url1 = ""
    if sport_nom == '1':
        url1 = f'https://32.flashscore.ninja/32/x/feed/f_1_{i}_3_ru_1'
    elif sport_nom == '2':
        url1 = f'https://32.flashscore.ninja/32/x/feed/f_2_{i}_3_ru_1'
    elif sport_nom == '3':
        url1 = f'https://32.flashscore.ninja/32/x/feed/f_3_{i}_3_ru_1'
    elif sport_nom == '4':
        url1 = f'https://32.flashscore.ninja/32/x/feed/f_4_{i}_3_ru_1'
    else:
        return []
    headers = {
        'User-Agent': 'Mozilla/5.0',
        'Accept': '*/*',
        'x-fsign': 'SW9D1eZo',
        'Connection': 'keep-alive'
    }
    try:
        r = requests.get(url1, headers=headers, timeout=10)
        if r.status_code != 200:
            return []
    except Exception:
        return []
    try:
        text_stranici = r.text.split('~ZA÷')
        for text_str in text_stranici[1:]:
            liga = text_str.split('¬')[0]
            games = text_str.split('~AA÷')
            for game in games[1:]:
                try:
                    data_matcha = datetime.fromtimestamp(int(game.split('AD÷')[1].split('¬')[0]))
                    data_matcha = data_matcha.strftime('%d.%m %H:%M')
                except:
                    data_matcha = ""
                try:
                    team1 = game.split('AE÷')[1].split('¬')[0]
                except:
                    team1 = ""
                try:
                    team2 = game.split('AF÷')[1].split('¬')[0]
                except:
                    team2 = ""
                try:
                    score1 = game.split('AG÷')[1].split('¬')[0]
                except:
                    score1 = ''
                try:
                    score2 = game.split('AH÷')[1].split('¬')[0]
                except:
                    score2 = ''
                try:
                    match_id = game.split('~AB÷')[1].split('¬')[0]
                except:
                    match_id = ''
                full_link = f"https://www.flashscore.ru/match/{match_id}/#match-summary" if match_id else ""
                all_spisok_matchey.append([
                    data_matcha, liga, team1, team2, score1, score2, full_link, match_id
                ])
    except Exception:
        pass
    return all_spisok_matchey

root = tk.Tk()
root.title("Flashscore - Матчи")
root.geometry("900x500")
root['bg'] = "#f2f2f7"

lf_matches = LabelFrame(root, text="Матчи", font=("Arial", 12, "bold"), bg="#f2f2f7", padx=4, pady=2)
lf_matches.pack(fill=tk.BOTH, expand=1, padx=8, pady=8)

sports_dict = {'Футбол': '1', 'Теннис': '2', 'Баскетбол': '3', 'Хоккей': '4'}
sp_dates = [(datetime.now() + timedelta(i)).strftime("%d.%m.%Y") for i in range(0, 4)]

frame_top = tk.Frame(lf_matches, bg="#f2f2f7")
frame_top.pack(fill=tk.X, pady=2)
tk.Label(frame_top, text="Вид:", bg="#f2f2f7", font=("Arial", 10)).pack(side=tk.LEFT, padx=2)
sport_var = StringVar(value='Футбол')
sport_combo = Combobox(frame_top, values=list(sports_dict.keys()), textvariable=sport_var, width=9, justify=CENTER, font=("Arial", 10))
sport_combo.pack(side=tk.LEFT, padx=2)
tk.Label(frame_top, text="Дата:", bg="#f2f2f7", font=("Arial", 10)).pack(side=tk.LEFT, padx=2)
date_var = StringVar(value=sp_dates[0])
date_combo = Combobox(frame_top, values=sp_dates, textvariable=date_var, width=10, justify=CENTER, font=("Arial", 10))
date_combo.pack(side=tk.LEFT, padx=2)

def show_matches():
    for row in tree.get_children():
        tree.delete(row)
    sport_code = sports_dict[sport_var.get()]
    date_idx = date_combo.current()
    global matches_cache
    # КЛЮЧЕВОЕ: передаём СТРОКУ-ИНДЕКС, а не timestamp!
    matches_cache = poisk_matchey(str(date_idx), sport_code)
    if matches_cache:
        for m in matches_cache:
            tree.insert('', tk.END, values=(m[0], m[1], m[2], m[3], f"{m[4]}-{m[5]}"))
        info_label['text'] = f"Найдено: {len(matches_cache)}"
    else:
        info_label['text'] = "Нет матчей"

tk.Button(frame_top, text="Показать матчи", command=show_matches, font="Arial 11 bold", bg="#d0ffd0", width=14).pack(side=tk.LEFT, padx=4)
tk.Button(lf_matches, text="Обновить", command=show_matches, font="Arial 11 bold", bg="#ccccff", width=14).pack(pady=4)
info_label = tk.Label(lf_matches, text="Выберите вид и дату", font="Arial 11 bold", bg="#f2f2f7")
info_label.pack(pady=1)

frame_table = tk.Frame(lf_matches)
frame_table.pack(expand=1, fill=tk.BOTH, padx=0, pady=2)
columns = ("Время", "Лига", "П1", "П2", "Счёт")
tree = Treeview(frame_table, columns=columns, show="headings", height=27)
for c in columns:
    if c == "Время":
        tree.column(c, width=100, anchor=tk.CENTER)
    elif c == "Лига":
        tree.column(c, width=180, anchor=tk.CENTER)
    elif c in ("П1", "П2"):
        tree.column(c, width=120, anchor=tk.CENTER)
    elif c == "Счёт":
        tree.column(c, width=70, anchor=tk.CENTER)
    tree.heading(c, text=c)
v_scroll = Scrollbar(frame_table, orient=tk.VERTICAL, command=tree.yview)
tree.configure(yscroll=v_scroll.set)
tree.grid(row=0, column=0, sticky="nsew")
v_scroll.grid(row=0, column=1, sticky="ns")
frame_table.grid_rowconfigure(0, weight=1)
frame_table.grid_columnconfigure(0, weight=1)
matches_cache = []

root.mainloop()